<?php
 namespace imwpf\apis; ini_set('memory_limit', '1024M'); use imwpf\admin\Options; class Sitemap { public function __construct() { $opt = Options::getInstance('imwpf_options')->get('admin_power'); $this->item = array( '<?xml version="1.0" encoding="utf-8"?>', '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' ); $this->siteMapIndex = 1; $this->siteMapItemCount = !empty($opt['sitemap_item_count']) ? $opt['sitemap_item_count'] : 5000; $this->siteMapPath = !empty($opt['sitemap_path']) ? '/' . trim($opt['sitemap_path'], '/') . '/' : '/'; add_action('wp_ajax_create_sitemap', array($this, 'execute')); add_action('wp_ajax_nopriv_create_sitemap', array($this, 'execute')); } public function execute() { add_filter('posts_fields_request', array($this, 'limitQuery')); wp_suspend_cache_addition(true); $page = isset($_GET['page']) ? $_GET['page'] : 1; if ($page == 1) { $this->createHomeAndCategory(); $url = get_bloginfo('url') . $this->siteMapPath . 'sitemap_' . $page . '.xml'; $data = array( 'errno' => 0, 'data' => array( 'next_url' => admin_url('admin-ajax.php?action=create_sitemap&page=2'), 'content' => '<p>生成 <a href="' . $url . '">' . $url . '</a></p>', ) ); echo json_encode($data); die(); } $WPQuery = new \WP_Query(array( 'posts_per_page' => $this->siteMapItemCount, 'paged' => $page - 1, 'cache_results' => false, )); if (!$WPQuery->have_posts()) { for ($i=1; $i < $page; $i++) { $siteMapName = 'sitemap_'. $i . '.xml'; $urls[] = get_bloginfo('url') . '/' . $siteMapName; } $this->saveSiteMaps($this->getSiteMapIndex($urls)); $url = get_bloginfo('url') . $this->siteMapPath . 'sitemap.xml'; $data = array( 'errno' => 0, 'data' => array( 'next_url' => '', 'content' => '<p>生成 <a href="'.$url.'">' . $url . '</a></p><p>全部生成完毕！可以关闭页面！</p>', ) ); echo json_encode($data); die(); } while ($WPQuery->have_posts()) { $post = $WPQuery->next_post(); $this->addItem(get_permalink($post), $post->post_date); } try { $this->saveSiteMap($this->render(), $page); $url = get_bloginfo('url') . $this->siteMapPath . 'sitemap_' . $page . '.xml'; $data = array( 'errno' => 0, 'data' => array( 'next_url' => admin_url('admin-ajax.php?action=create_sitemap&page=' . ($page + 1)), 'content' => '<p>生成 <a href="' . $url . '">' . $url . '</p>', ) ); } catch (\Exception $e) { $msg = $e->getMessage(); $data = array( 'errno' => 0, 'data' => array( 'next_url' => '', 'content' => $msg, ) ); } echo json_encode($data); die(); } public function createHomeAndCategory() { $this->addItem(get_bloginfo('url'), date('Y-m-d H:i:s'), 1); $args = array( 'hide_empty' => 0, 'hide_if_empty' => false, 'taxonomy' => 'category' ); $terms = get_terms($args); foreach ($terms as $term) { $this->addItem(get_term_link($term, 'category'), null, 0.9); } $this->saveSiteMap($this->render(), 1); } public function render() { if (count($this->item) == 2) { return false; } $this->item[] = '</urlset>'; return implode("\n", $this->item); } public function reset() { $this->count = 0; $this->item = array( '<?xml version="1.0" encoding="utf-8"?>', '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' ); } public function addItem($link, $date = null, $priority = 0.8) { if ($date) { $template = "<url>
    <loc>%s</loc>
    <lastmod>%s</lastmod>
    <changefreq>daily</changefreq>
    <priority>{$priority}</priority>
</url>"; $this->item[] = sprintf($template, $link, date('c', strtotime($date))); } else { $template = "<url>
    <loc>%s</loc>
    <changefreq>daily</changefreq>
    <priority>{$priority}</priority>
</url>"; $this->item[] = sprintf($template, $link); } } public function getSiteMapIndex($urls) { $sitemapIndex = array( '<?xml version="1.0" encoding="utf-8"?>', '<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' ); foreach ($urls as $url) { $sitemapIndex[] = '<sitemap>
      <loc>'.$url.'</loc>
      <lastmod>'.date('c').'</lastmod>
   </sitemap>'; } $sitemapIndex[] = '</sitemapindex>'; return implode("\n", $sitemapIndex); } public function saveSiteMap($sitemap, $index = 1) { $siteMapName = 'sitemap_'. $index . '.xml'; $path = ABSPATH . $this->siteMapPath; if (!file_exists($path)) { if (!mkdir($path, 0755, true)) { throw new \Exception("创建sitemap文件夹失败", 1); } } $file = $path . $siteMapName; return file_put_contents($file, $sitemap); } public function saveSiteMaps($siteMaps) { $path = ABSPATH . $this->siteMapPath; if (!file_exists($path)) { if (!mkdir($path, 0755, true)) { throw new \Exception("创建sitemap文件夹失败", 1); } } $file = $path . 'sitemap.xml'; $this->siteMaps[] = get_bloginfo('url') . '/sitemap.xml'; file_put_contents($file, $siteMaps); } public function limitQuery($fields) { $prefix = $GLOBALS['wpdb']->prefix; $fields = "{$prefix}posts.ID, {$prefix}posts.post_date, {$prefix}posts.post_title, {$prefix}posts.post_name, {$prefix}posts.guid"; return $fields; } }